 작업 디렉토리 ( working directory , working folder)
- 작업공간 (work space) , 작업트리 (working tree)
- Modified , untracked
- 스테이징 영역 (staging area , stage area , index )
- Staged , indexed
- 깃 저장소 ( git repository , repository , .git directory )
- Committed
- 임시 저장소 ( stash )
Add 작업 디렉토리 : 스테이징 영역 이동
Commit 스테이징 영역 : 깃 저장소
Git 명령어
버전 확인 : $ git —version
설정 확인 : $ git config —list
도움 : $ git —help
깃 버전관리와 파일 관리
시스템 버전 설치 권장
- 탐색기에서 파일 또는 디렉토리에서 바로 ‘vscode로 열기’ 메뉴 체크
리눅스 명령
깃 CLI에서 함께 명령 사용
활동바(툴바) 활용
- $ pwd
- $ ls -al
- $ touch a.txt 
- $ echo aaa > a.txt
- $ cat a.txt
깃 설정
$ git config --global user.name “hs kang"
$ git config --global user.email hsakng@gmail.com
$ git config --global core.autocrlf true
$ git config --global core.safecrlf false
깃 저장소 생성과 버전관리 과정
$ git init basic
$ git add hello.txt
$ git commit –m A
$ git status
$ git log --oneline
git init basic
status
파일 처음 생성
add, commit
• Untracked file
붉은 색 표시는 작업 디렉토리를 의미
처음 add한 파일
• A new file
녹색 표시는 스테이징 영역을 의미
다시 수정한 파일
• Modified file
붉은 색 표시는 작업 디렉토리를 의미
스테이징 영역과 비교해서 작업 디렉토리의 파일이 수정된 것을 의미
$ git show --oneline
수정한 파일을 add
• Modified file 
녹색 표시는 스테이징 영역을 의미
최근 커밋과 비교해서 스테이징 영역의
파일이 수정된 것을 의미함
모두 커밋 이력 보기
$ git log
• --oneline --graph --all -n
특정한 커밋 이력 보기
$ git show [HEAD]
• --oneline
저장소 생성
$ git init basic
깃 저장소에 저장
$ git add, commit
모두 커밋 이력 보기
$ git log
--oneline --graph --all -n
측정한 커밋 이력 보기
$ git show [HEAD]
--oneline
바로 이전 버전으로 가기
$ git checkout HEAD~
다시 최신 버전으로 돌아오기
$ git checkout main
다시 checkout 이전으로 돌아오기
$ git checkout -
스테이징 영역 기준으로 작업 디렉토리 파일 비교
$ git diff
깃 저장소 기준으로 작업 디렉토리 파일 비교
$ git diff HEAD
깃 저장소 기준으로 스테이징 영역 파일 비교
$ git diff --staged HEAD
파일 삭제
$ git rm f
$ git rm --cached f
파일 복구
$ git restore f 
$ git restore --staged f
$ git restore --source=HEAD --worktree f
$ git restore --source=HEAD --staged --worktree f
$ git branch
저장소 목록 보기
$ git branch <new
-branch>
저장소 생성만
$ git checkout 
-b <new
-branch>
저장소 생성하고 이동
$ git switch 
–c <new
-branch>
저장소 생성하고 이동
$ git branch 
–d branch
-name
저장소 삭제
$ git branch 
–D branch
-name
저장소 삭제, 강제 삭제 
